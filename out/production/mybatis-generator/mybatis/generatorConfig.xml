<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <properties resource="dataSource.properties"/>
    <!--  <classPathEntry location="${generator.location}"/>-->

    <context id="MysqlTables" targetRuntime="MyBatis3">

        <!--去除注释-->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!--指定生成的类型为java类型，避免数据库中number等类型字段 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--自动生成的实体的存放包路径 -->
        <javaModelGenerator targetPackage="${javaModelGenerator}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--自动生成的*Mapper.xml文件存放路径 -->
        <sqlMapGenerator targetPackage="${sqlMapGenerator}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--自动生成的*Mapper.java存放路径 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${javaClientGenerator}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <table tableName="json_test">
            <property name="useActualColumnNames" value="false"/>
            <!--<generatedKey column="ID" sqlStatement="DB2" identity="true"/>-->
            <!--<ignoreColumn column="FRED"/>-->
            <columnOverride column="PERSON_DESC" jdbcType="VARCHAR"/>
        </table>

        <!--
            generatedKey:用于生成生成主键的方法，
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement:要生成的selectKey语句，有以下可选项：
                Cloudscape  :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2         :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2_MF      :相当于selectKey的SQL为： SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                Derby       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                HSQLDB      :相当于selectKey的SQL为： CALL IDENTITY()
                Informix    :相当于selectKey的SQL为： SELECT dbinfo('sqlca.sqlerrd1') FROM systables WHERE tabid=1
                MySql       :相当于selectKey的SQL为： SELECT LAST_INSERT_ID()
                SqlServer   :相当于selectKey的SQL为： SELECT SCOPE_IDENTITY()
                SYBASE      :相当于selectKey的SQL为： SELECT @@IDENTITY
                JDBC        :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
        -->

        <!--
            columnOverride
            用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
            column:要重新设置的列名；
            javaType:用于指定生成的domain的属性类型，使用类型的全限定名
            jdbcType:用于指定该列的JDBC类型
            typeHandler:用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
            delimitedColumnName:设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false
            注意，一个table元素中可以有多个columnOverride元素哈~
         -->

        <!--
            ignoreColumn:
                设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
            column:指定要忽略的列的名字；
        -->

    </context>
</generatorConfiguration>